AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Identifier:
    Value: main
  Input:
    Description: Input of all required parameters in nested stacks
  Output:
    Description: N/A
Description: ""
Parameters:
  Prefix:
    Description: ""
    Type: String
  ManagementVPC:
    Type: String
    Description: Management VPC.
  ManagementDMZSubnet1:
    Type: String
    Description: Management VPC DMZ subnet 1.
  ProductionVPC:
    Type: String
    Description: Production VPC.
  ProductionCoreSubnet1:
    Type: String
    Description: Production VPC private subnet 1.
  ProductionCoreSubnet2:
    Type: String
    Description: Production VPC private subnet 2.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  BastionInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.small
    ConstraintDescription: must be a valid EC2 instance type.
  WebInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SftpInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.small
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  BastionAmiId:
    Type: String
    Default: ami-06279638588b9d877
  WebAmiId:
    Type: String
    Default: ami-057d9271df8f35ee7
  SftpAmiId:
    Type: String
    Default: ami-049943884bd784e0e
Resources:
  ManagedInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ec2-bootstrap-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Path: "/"
  ManagedInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref ManagedInstanceRole
      InstanceProfileName: ec2-bootstrap-profile
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref "BastionInstanceType"
      SecurityGroupIds: [!Ref "BastionInstanceSecurityGroup"]
      KeyName: !Ref "KeyName"
      ImageId: !Ref "BastionAmiId"
      SubnetId: !Ref ManagementDMZSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}spdbast01"
  BastionInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Prefix}-ehs-bastion-sg"
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref ManagementVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref "SSHLocation"
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref "SSHLocation"

  WebInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref "WebInstanceType"
      SecurityGroupIds: [!Ref "WebInstanceSecurityGroup"]
      KeyName: !Ref "KeyName"
      ImageId: !Ref "WebAmiId"
      SubnetId: !Ref ProductionCoreSubnet1
      IamInstanceProfile: !Ref ManagedInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}spdweb01"
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          function Execute-CommandString{
              [cmdletbinding()]
              param(
                  [Parameter(Mandatory=$true,Position=0,ValueFromPipeline=$true)]
                  [string[]]$command,
                  [switch]
                  $ignoreExitCode
              )
              process{
                  foreach($cmdToExec in $command){
                      'Executing command [{0}]' -f $cmdToExec | Write-Verbose
                      cmd.exe /D /C $cmdToExec

                      if(-not $ignoreExitCode -and ($LASTEXITCODE -ne 0)){
                          $msg = ('The command [{0}] exited with code [{1}]' -f $cmdToExec, $LASTEXITCODE)
                          throw $msg
                      }
                  }
              }
          }

          function Expand-ZIPFile($File, $Destination){
              $shell = new-object -com shell.application
              $zip = $shell.NameSpace($File)
              foreach($item in $zip.items()){
                  $shell.Namespace($Destination).copyhere($item)
              }
          }


          function Download_and_Extract_FromS3 {
              [cmdletbinding()]
              Param (
                  [Parameter(Mandatory=$true)]
                  [string[]]$Keys,
                  [Parameter(Mandatory=$true)]
                  [ValidateScript({ $( Get-S3Bucket -BucketName $_ ) })]
                  [string]$BucketName
              )
              $LocalPath = "C:\S3\"
              $LocalPathExtract="C:\S3\Output"
              If (Test-Path -Path $LocalPath) {
                  Remove-Item $LocalPath -Force 
              }
              New-Item -ItemType Directory -Force -Path $LocalPath
              New-Item -ItemType Directory -Force -Path $LocalPathExtract

              foreach ($Key in $Keys) {
                  Copy-S3Object -BucketName $BucketName -Key $Key -LocalFolder $LocalPath
              }

              # Copy-S3Object -BucketName $bucket -Key $Key -LocalFolder $LocalPath
              # $FilePath = Get-ChildItem -Path $LocalPath -Recurse *.zip | Select-Object FullName
              # $FilePathName = $FilePath.FullName
              # Expand-ZIPFile –File $FilePathName –Destination $LocalPathExtract
          }

          function Deploy {
              [cmdletbinding()]
              Param (
                  [Parameter(Mandatory=$true)]
                  [string]$Package,
                  [Parameter(Mandatory=$true)]
                  [string]$SiteName
              )
              $msdeployExe = 'C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe'
              $publishArgs = @()
              $publishArgs += '-verb:sync'
              $publishArgs += ('-source:package=''{0}''' -f "$Package")
              $publishArgs += '-dest:auto'
              $publishArgs += ('-setParam:name="IIS Web Application Name",value="{0}"' -f "$SiteName")
              'Calling msdeploy with the command: [{0} {1}]' -f $msdeployExe,($publishArgs -join ' ') | Write-Output
              $command = '"{0}" {1}' -f $msdeployExe,($publishArgs -join ' ')
              Execute-CommandString -command $command
          }


          Download_and_Extract_FromS3 -BucketName spd-analytics-builds -Keys HCS.Web.API.zip,HCS.Web.App.zip,R2.Web.Services.zip
          Deploy -Package "C:\S3\HCS.Web.App.zip" -SiteName "HCS.WebUI"
          Deploy -Package "C:\S3\HCS.Web.API.zip" -SiteName "HCS.API\API"
          Deploy -Package "C:\S3\R2.Web.Services.zip" -SiteName "HCS.API\Services"
          </powershell>
          <persist>true</persist>

  WebInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Prefix}-ehs-web-sg"
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref ProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 172.0.0.0/8
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 172.0.0.0/8
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 172.0.0.0/8
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 172.0.0.0/8
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 172.0.0.0/8
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 172.0.0.0/8
  SftpInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref "SftpInstanceType"
      SecurityGroupIds: [!Ref "SftpInstanceSecurityGroup"]
      KeyName: !Ref "KeyName"
      ImageId: !Ref "SftpAmiId"
      SubnetId: !Ref ManagementDMZSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}spdsftp01"
  SftpInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Prefix}-ehs-sftp-sg"
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref ManagementVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 172.0.0.0/8
# Outputs:
#   BastionInstanceId:
#     Description: InstanceId of the newly created EC2 instance
#     Value: !Ref "EC2Instance"
#   PublicDNS:
#     Description: Public DNSName of the newly created EC2 instance
#     Value: !GetAtt [EC2Instance, PublicDnsName]
#   PublicIP:
#     Description: Public IP address of the newly created EC2 instance
#     Value: !GetAtt [EC2Instance, PublicIp]
